const getUserName = require('./usernames-dictionary').getName;
const getUserGender = require('./usernames-dictionary').getGender;

function getAny(...messages) {
  return messages[Math.floor(Math.random() * messages.length)];
}

const START_EMOJI = 'üöú';
const WRONG_EMOJI = 'üôà';
const RIGHT_EMOJI = 'üç≠';
const STOP_EMOJI = 'üíî';
const QUESTION_EMOJI = '‚ùì';
const BANK_EMOJI = 'üè¶';
const HINT_EMOJIS = ['üïõ', 'üïí', 'üïß', 'üïò'];
const PLACE_EMOJIS = {pile: 'üí∞', pound: 'üí∑', euro: 'üí∂', buck: 'üíµ', yen: 'üí¥', fly: 'üí∏'};

function getPlaceEmoji(place) {
  switch (place) {
    case 0:
      return PLACE_EMOJIS.pile;
    case 1:
    case 2:
      return PLACE_EMOJIS.pound;
    case 3:
    case 4:
      return PLACE_EMOJIS.euro;
    case 5:
    case 6:
      return PLACE_EMOJIS.buck;
    case 7:
    case 8:
    case 9:
    case 10:
      return PLACE_EMOJIS.yen;
    default:
      return PLACE_EMOJIS.fly;
  }
}

const API = {
  startGame: () => `${START_EMOJI} ${getAny(
    '–ü–æ–Ω–µ—Å–ª–∞—Å—å!',
    '–ö—Ä—É—Ç–∏—Å—å, –±–∞—Ä–∞–±–∞–Ω!',
    '–ê —Ç—ã —Å–º–µ–ª—ã–π!',
    '–ù—É –¥–∞–≤–∞–π, –¥–∞–≤–∞–π!'
  )}`,
  hint: (hint, question, number) => `${QUESTION_EMOJI}${question}\n\n${HINT_EMOJIS[number - 1] || ''} –ü–æ–¥—Å–∫–∞–∑–∫–∞: ${hint}`,
  question: (counter, question) => `${QUESTION_EMOJI} ${counter}. ${question}`,
  stop: player => `${STOP_EMOJI} ${player}, –Ω–µ –≥–æ–≤–æ—Ä–∏ —Ç–∞–∫(((`,
  // Add places instead of score 
  end: winners => `${BANK_EMOJI} *–ê –≤–æ—Ç –∏ –º–∏–ª–ª–∏–æ–Ω–µ—Ä—ã:* 

${winners.map((it, place) => `${getPlaceEmoji(place)} *${getUserName(it)}*  –æ—á–∫–æ–≤(–∞): ${it.score}, –æ—Ç–≤–µ—Ç–æ–≤: ${it.score}`).join('\n')}

`,
  trollingMessages: (user) => {
    if (getUserGender(user) === 'female') {
      return API.womanTrollingMessages(user);
    }
    const login = user.username;
    const userName = getUserName(user);

    return getAny(
      `@${login} :-*`,
      `${userName}, –∞ –Ω–µ –ø–∏–¥–æ—Ä –ª–∏ —Ç—ã?`,
      `${userName}, –æ—Ç—Å—Ç–∞–Ω—å.`,
      `${userName}, –¥–æ–º–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º.`,
      `${userName}, —á–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?`,
      `${userName}, –Ω–∏–∫–æ–≥–¥–∞ —Ç–∞–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–ª–∞–π.`,
      `@${login}, —Ç—ã –≤–æ–æ–±—â–µ –∫—Ç–æ?`
    );
  },
  womanTrollingMessages: (user) => {
    const login = user.username;
    const userName = getUserName(user);

    return getAny(
      `@${login}üåπ`,
      `${userName}, —è —Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ.`,
      `${userName}, —Ç—ã –º–Ω–µ —Å–Ω–∏–ª–∞—Å—å.`,
      `${userName}, üíã`,
      `${userName}, üòª`,
      `${userName}, üë®‚Äçüë©‚Äçüëß‚Äçüëß`,
      `–¢—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è, ${userName}.`
    );
  },
  nobodyIsRight: (question) => `${WRONG_EMOJI}Ô∏è ${getAny(
    `–ù—É –≤—ã –¥–∞—ë—Ç–µ, *${question.answer}* –∂–µ! üòì`,
    `–ù–∏–∫—Ç–æ –Ω–µ —Å–º–æ–≥. *${question.answer}* - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.üòø`,
    `–ú–Ω–µ –∑–∞ –≤–∞—Å —Å—Ç—ã–¥–Ω–æ. –ü–æ–≥—É–≥–ª–∏—Ç–µ *${question.answer}* –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.`,
    `–í—ã –≤–æ–æ–±—â–µ –≤ —à–∫–æ–ª–µ —É—á–∏–ª–∏—Å—å? –û—Ç–≤–µ—Ç: *${question.answer}*`,
    `–°–µ—Ä—å—ë–∑–Ω–æ, –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ *${question.answer}*?`,
    `–õ—é–±–æ–π —à–∫–æ–ª—å–Ω–∏–∫ –∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ *${question.answer}*.`,
    `–Ø –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂—É –æ—Ç–≤–µ—Ç: *${question.answer}*.`
  )}`,
  rightAnswer: (user) => {
    const userName = getUserName(user);

    return `${RIGHT_EMOJI} ${getAny(
      `–î–∞, ${userName}! –ï—â—ë!`,
      `${userName} –æ—Ç–≤–µ—Ç–∏–ª –∫–∞–∫ –ë–æ–∂–µ–Ω—å–∫–∞!`,
      `–£—á–∏—Ç–µ—Å—å, –∫–∞–∫ –Ω–∞–¥–æ!`,
      `–í–æ—Ç –æ–Ω, –æ—Ç–≤–µ—Ç –º–æ–µ–π –º–µ—á—Ç—ã!`,
      `–°–∞–¥–∏—Å—å, ${userName}, –ø—è—Ç—å!`,
      `–õ—é–±–ª—é —Ç–∞–∫–æ–µ.`,
      `–í –∫–æ–≥–æ —Ç—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π, ${userName}?`,
      `–ú–Ω–æ–≥–æ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å ‚Äî —Å–∫–æ—Ä–æ —Å–æ—Å—Ç–∞—Ä–∏—à—å—Å—è.`,
      `–ê–π–º–∞–ª–∞—Ü–∞!`
    )}`
  }
};

module.exports = API;